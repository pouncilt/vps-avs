/* Generated By:JavaCC: Do not edit this line. ConfigStringParser.java */
/*-----------------------------------------------------------------------------
 * ConfigStringParser (DO NOT EDIT - MACHINE GENERATED)
 *   JavaCC-generated parser for parsing a Config value String
 *-----------------------------------------------------------------------------
 */

package gov.va.med.lom.javaUtils.config;

import java.io.*;
import java.util.*;

public class ConfigStringParser implements ConfigStringParserConstants {
    public static void main(String args[]) throws ParseException, IOException
    {
        BufferedReader in =
                new BufferedReader(new InputStreamReader(System.in));
        String instr = in.readLine();
        String[] values = ConfigStringParser.parseStringArray(instr);
        System.out.println(values.length + " elements");
        for (int i = 0; i < values.length; i++) {
            System.out.println(values[i]);
        }
    }

    public static String[] parseStringArray(String valuestr)
            throws ParseException
    {
        String[] values = null;
        byte[] bb = valuestr.getBytes();
        ByteArrayInputStream inputStream = new ByteArrayInputStream(bb);
        ConfigStringParser parser = new ConfigStringParser(inputStream);
        try {
            try {
                values = parser.ParseConfigString();
            } catch (TokenMgrError e) {
                throw parser.generateParseException();
            }
        } catch (ParseException e) {
            System.err.println("Syntax error in config file at line " +
                e.currentToken.next.beginLine +
                ", column " + e.currentToken.next.beginColumn + ".");
            throw e;
        }
        return values;
    }

    private static final boolean isodigit(char c) {
        switch (c) {
            case '0': case '1': case '2': case '3':
            case '4': case '5': case '6': case '7':
                return true;
        }
        return false;
    }

    private static final boolean isxdigit(char c) {
        switch (c) {
            case '0': case '1': case '2': case '3':
            case '4': case '5': case '6': case '7':
            case '8': case '9':
            case 'a': case 'b': case 'c': case 'd': case 'e': case 'f':
            case 'A': case 'B': case 'C': case 'D': case 'E': case 'F':
                return true;
        }
        return false;
    }

// PARSER SPECIFICATIONS BEGIN HERE
  final public String[] ParseConfigString() throws ParseException {
    Vector vv;
    String[] values;
    vv = ValueList();
        values = new String[vv.size()];
        vv.copyInto(values);
        {if (true) return values;}
    throw new Error("Missing return statement in function");
  }

  final public Vector ValueList() throws ParseException {
    String sval = null;
    Vector vlist = null;
    sval = Value();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      vlist = ValueList();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
        if (vlist == null) {
            vlist = new Vector();
            vlist.addElement(sval);
        } else {
            vlist.insertElementAt(sval, 0);
        }
        {if (true) return vlist;}
    throw new Error("Missing return statement in function");
  }

  final public String Value() throws ParseException {
    String lhs="", rhs="";
    lhs = ValueFragment();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      rhs = Value();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
        {if (true) return lhs + rhs;}
    throw new Error("Missing return statement in function");
  }

  final public String ValueFragment() throws ParseException {
    Token val;
    String sval;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QSTRING:
      sval = QuotedString();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
        {if (true) return sval;}
      break;
    case STRING:
      val = jj_consume_token(STRING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WHITESPACE:
        jj_consume_token(WHITESPACE);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
        {if (true) return val.image;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String QuotedString() throws ParseException {
    Token qs;
    StringBuffer sbuf;
    int i;
    char[] cbuf;
    qs = jj_consume_token(QSTRING);
        sbuf = new StringBuffer();
        cbuf = qs.image.toCharArray();
        for (i=1; i < (cbuf.length - 1); i++) {
            switch (cbuf[i]) {
                case '\\':
                    switch (cbuf[i+1]) {
                        case 'n':
                            sbuf.append("\n"); i += 1; break;
                        case 't':
                            sbuf.append("\t"); i += 1; break;
                        case 'b':
                            sbuf.append("\b"); i += 1; break;
                        case 'r':
                            sbuf.append("\r"); i += 1; break;
                        case 'f':
                            sbuf.append("\f"); i += 1; break;
                        case 'u':
                            if ((cbuf.length - i >= 6) &&
                                (isxdigit(cbuf[i+2])) &&
                                (isxdigit(cbuf[i+3])) &&
                                (isxdigit(cbuf[i+4])) &&
                                (isxdigit(cbuf[i+5]))) {
                                try {
                                    String s = new String(cbuf, i+2, 4);
                                    int val = Integer.parseInt(s, 16);
                                    sbuf.append((char)val);
                                    i += 5;
                                } catch (Throwable t) {
                                    sbuf.append(cbuf[i+1]);
                                    i += 1;
                                }
                            } else {
                                sbuf.append(cbuf[i+1]);
                                i += 1;
                            }
                            break;
                        case 'x':
                            if ((cbuf.length - i >= 4) &&
                                (isxdigit(cbuf[i+2])) &&
                                (isxdigit(cbuf[i+3]))) {
                                try {
                                    String s = new String(cbuf, i+2, 2);
                                    int val = Integer.parseInt(s, 16);
                                    sbuf.append((char)val);
                                    i += 3;
                                } catch (Throwable t) {
                                    sbuf.append(cbuf[i+1]);
                                    i += 1;
                                }
                            } else {
                                sbuf.append(cbuf[i+1]);
                                i += 1;
                            }
                            break;
                        default:
                            if ((cbuf.length - i >= 4) &&
                                (isodigit(cbuf[i+1])) &&
                                (isodigit(cbuf[i+2])) &&
                                (isodigit(cbuf[i+3]))) {
                                try {
                                    String s = new String(cbuf, i+1, 3);
                                    int val = Integer.parseInt(s, 8);
                                    sbuf.append((char)val);
                                    i += 3;
                                } catch (Throwable t) {
                                    sbuf.append(cbuf[i+1]);
                                    i += 1;
                                }
                            } else {
                                sbuf.append(cbuf[i+1]);
                                i += 1;
                            }
                            break;
                    } // inner switch
                    break;
                default:
                    sbuf.append(cbuf[i]);
                    break;
            } // outer switch
        } // outer for
        {if (true) return sbuf.toString();}
    throw new Error("Missing return statement in function");
  }

  public ConfigStringParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  final private int[] jj_la1_0 = {0x2,0x80,0x2,0x40,0x2,0x2,0x18,};

  public ConfigStringParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConfigStringParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public ConfigStringParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ConfigStringParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public ConfigStringParser(ConfigStringParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  public void ReInit(ConfigStringParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[8];
    for (int i = 0; i < 8; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 8; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
